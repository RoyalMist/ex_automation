name: CI
on:
  push:
    branches: [main]
    tags:
      - "*"
  pull_request:
    branches: [main]
permissions:
  contents: read
env:
  SHELL: /bin/bash
jobs:
  tools:
    name: TOOLS
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: jdx/mise-action@v3
  lint:
    name: LINT
    needs: [tools]
    runs-on: ubuntu-24.04
    env:
      MIX_ENV: dev
    steps:
      - uses: actions/checkout@v5
      - uses: jdx/mise-action@v3
      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ env.MIX_ENV }}-mise-${{ hashFiles('**/mise.toml') }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.MIX_ENV }}-mise-${{ hashFiles('**/mise.toml') }}-mix-
            ${{ env.MIX_ENV }}-mise-
      - run: mix deps.get
      - run: mix compile --warnings-as-errors
      - run: mix format --dry-run --check-formatted
      - run: mix deps.unlock --check-unused
      - run: mix hex.audit
      - run: mix deps.audit
      - run: mix credo
      - uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: "config"
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"
      - uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          skip-dirs: _build
          severity: "CRITICAL,HIGH"
  test:
    name: TEST
    needs: [tools]
    runs-on: ubuntu-24.04
    env:
      MIX_ENV: test
    services:
      postgres:
        image: postgis/postgis:17-3.5-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v5
      - uses: jdx/mise-action@v3
      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ env.MIX_ENV }}-mise-${{ hashFiles('**/mise.toml') }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.MIX_ENV }}-mise-${{ hashFiles('**/mise.toml') }}-mix-
            ${{ env.MIX_ENV }}-mise-
      - run: mix deps.get
      - run: mix test --max-failures=1 --color
  security:
    name: BUILD & SECURITY
    needs: [lint, test]
    runs-on: ubuntu-24.04
    env:
      MIX_ENV: prod
    steps:
      - uses: actions/checkout@v5
      - uses: jdx/mise-action@v3
      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ env.MIX_ENV }}-mise-${{ hashFiles('**/mise.toml') }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.MIX_ENV }}-mise-${{ hashFiles('**/mise.toml') }}-mix-
            ${{ env.MIX_ENV }}-mise-
      - run: mix deps.get --only prod
      - run: mix do assets.setup, compile --warnings-as-errors, assets.deploy, release --overwrite
      - uses: docker/setup-buildx-action@v3
      - run: docker build -t image:${{ github.sha }} .
      - uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: "image:${{ github.sha }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
  build:
    name: PRODUCTION DEPLOYMENT
    needs: [security]
    if: ${{ contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-24.04
    env:
      MIX_ENV: prod
    steps:
      - uses: actions/checkout@v5
      - uses: jdx/mise-action@v3
      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ env.MIX_ENV }}-mise-${{ hashFiles('**/mise.toml') }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.MIX_ENV }}-mise-${{ hashFiles('**/mise.toml') }}-mix-
            ${{ env.MIX_ENV }}-mise-
      - run: mix deps.get --only prod
      - run: mix do assets.setup, compile --warnings-as-errors, assets.deploy, release --overwrite
      - uses: docker/setup-buildx-action@v3
      - uses: 1password/load-secrets-action/configure@v3
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      - uses: 1password/load-secrets-action@v3
        with:
          export-env: true
        env:
          SSH_KEY: "op://PrisM/Estimeight SSH Key/private key?ssh-format=openssh"
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ env.SSH_KEY }}
      - run: bundle install
      - run: bundle exec kamal setup
